import Head from 'next/head'
import { usePreviewSubscription } from '../lib/sanity'
import { filterDataToSingleItem } from '../lib/functions'
import { getClient, GetImage } from '../lib/sanity.server'
import { groq } from 'next-sanity'
import { routeQuery } from '../lib/queries/routeQuery'
import { TextBlocks } from '../components/TextBlocks'
import { useRouter } from 'next/router'
import { GetStaticPaths, GetStaticProps, NextPage } from 'next'
import { AppShell, HeaderShell, MarcusIcon, Menu, Modal, Pane, PanesShell } from 'ui'
import Link from 'next/link';
import { MainNav } from '../components/Header/MainNav'
import Image from 'next/image'

export const getStaticPaths: GetStaticPaths = async () => {
  const routesQuery = groq`
    *[ _type == "Route" && defined(slug.current) && defined(page)] {
    "locales": [
      {
        "lang": page->.__i18n_lang,
        "slug": [slug.current]
      },
      ...page->.__i18n_refs[]->{
        "lang": __i18n_lang,
        "slug": [^.slug.current]
      }
    ],
  }`

  const routes = await getClient().fetch(routesQuery)
  const paths = routes?.map((route: any) => (
    route.locales.map((locale: any) => ({
      params: {
        "slug": locale.slug,
        "locale": locale.lang
      }
    }))
  )) || []

  return {
    paths: paths[0],
    fallback: 'blocking',
  }
}
export const getStaticProps: GetStaticProps = async ({ params, locale, preview = false }) => {
  const slug = typeof params?.slug === 'string' ? params.slug : params?.slug?.join('/')
  const query = routeQuery
  const queryParams = { slug: slug, language: locale }
  const page = await getClient(preview).fetch(routeQuery, queryParams)

  // Escape hatch, if our query failed to return data
  if (!page) return { notFound: true }

  // Helper function to reduce all returned documents down to just one
  // const page = filterDataToSingleItem(data, preview)

  return {
    props: {
      // Pass down the "preview mode" boolean to the client-side
      preview,
      // Pass down the initial content, and our query
      data: { page, query, queryParams },
      //messages: (await import(`../messages/${locale}.json`)).default
    },
  }
}

const Page: NextPage = ({ data, preview }: any) => {
  const { locale, defaultLocale } = useRouter()
  const { data: previewData } = usePreviewSubscription(data?.query, {
    params: data?.queryParams ?? {},
    // The hook will return this on first render
    // This is why it's important to fetch *draft* content server-side!
    initialData: data?.page,
    // The passed-down preview context determines whether this function does anything
    enabled: preview,
  })

  // Client-side uses the same query, so we may need to filter it down again
  const page = filterDataToSingleItem(previewData, preview)
  //console.log(JSON.stringify(page, null, 2))

  {/* If LinguisticDocument the content is in the body field */ }
  const slug = page?.route[0]?.locale[0] ?? page?.route[0]?.fallback[0]
  const linguisticDocumentBody = page?.route[0]?.locale[0]?.body ?? page?.route[0]?.fallback[0]?.body

  const { mainNav, siteSettings: { label } } = page
  // Notice the optional?.chaining conditionals wrapping every piece of content?
  // This is extremely important as you can't ever rely on a single field
  // of data existing when Editors are creating new documents.
  // It'll be completely blank when they start!
  return (
    <>
      <Head>
        <title>{label[locale || '']}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppShell>

        <PanesShell>
          <Pane intent='sidebar' padded={false}>
            <HeaderShell className='order-3'>
              <Link href={`/`}>
                {label[locale || '']}
              </Link>
            </HeaderShell>

            <Menu className='order-1' aria-label='primary navigation'>
              <MainNav value={mainNav} />
              <div className='p-3 border-t flex gap-2'>
                <Link
                  href={`/studio`}
                  locale={false}
                  target="_blank"
                  rel="noreferrer"
                  className='text-xs font-semibold'
                >
                  Studio
                </Link>
                <Modal buttonLabel="Data" title="Data">
                  <pre className='text-xs max-h-[70vh] overflow-scroll border p-3'>
                    {JSON.stringify(data, null, 2)}
                  </pre>
                </Modal>
              </div>
            </Menu>

            <div className='grow order-2' aria-hidden>&nbsp;</div>

            <nav className='order-4' aria-label='secondary'>
              <a href="https://marcus.uib.no" aria-label='Go to Marcus'>
                <MarcusIcon className='max-sm:w-6 max-sm:h-6 md:w-10 md:h-10' />
              </a>
            </nav>
          </Pane>


          <Pane intent='content' padded={false}>
            <div className='flex flex-col flex-grow'>
              <div className='grid grid-template-columns-1 w-full max-h-screen'>
                <div
                  className='z-10 text-center font-light  text-neutral-900'
                  style={{ gridArea: '1 / 1 / 2 / 2', textShadow: '1px 2px 1px #bbb' }}
                >
                  <h1
                    className='text-6xl mt-40'
                  >
                    {slug?.label}
                  </h1>
                  <div
                    className='mt-10 text-2xl'
                  >
                    by {' '}
                    {slug?.creator[0].assignedActor.label[locale || '']}
                  </div>
                </div>

                {slug?.image && (
                  <Image
                    src={''}
                    {...GetImage(slug.image) as Record<string, unknown>}
                    style={{ gridArea: '1 / 1 / 2 / 2' }}
                    className='object-cover w-full max-h-screen'
                    alt={slug?.image?.alt ?? ''} />
                )}
              </div>

              <div className='flex flex-col mx-5 my-5 self-center max-w-1/4'>
                {linguisticDocumentBody && <TextBlocks value={linguisticDocumentBody} />}
              </div>
            </div>

          </Pane>
        </PanesShell>
      </AppShell>
    </>
  )
}

export default Page


{/* 
    <div
    maxW={'6xl'} THIS IS THE GRID THAT WAS USED EARLIER
    templateColumns={{
      base: '1em minmax(1.2rem, 1fr) 1em 1fr 1em minmax(1.2rem, 1fr) 1em',
      md: '1em minmax(1.2rem, 1fr) 1em minmax(42ch, 82ch) 1em minmax(1.2rem, 1fr) 1em',
    }}
    margin='auto'
    >
   */}
